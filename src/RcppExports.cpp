// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// SODEFKFilterCpp
Rcpp::List SODEFKFilterCpp(const arma::colvec& I, const arma::colvec& V, const arma::colvec& theta_0, const arma::colvec& ocv_0, const double& SOC_0, const double& C_max, const std::vector<arma::mat>& P, const std::vector<arma::mat>& Q, const std::vector<arma::mat>& R, const double& dt, const unsigned int K, const bool& trace, const unsigned int& traceLimit);
RcppExport SEXP _BatteryPrognostics_SODEFKFilterCpp(SEXP ISEXP, SEXP VSEXP, SEXP theta_0SEXP, SEXP ocv_0SEXP, SEXP SOC_0SEXP, SEXP C_maxSEXP, SEXP PSEXP, SEXP QSEXP, SEXP RSEXP, SEXP dtSEXP, SEXP KSEXP, SEXP traceSEXP, SEXP traceLimitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type theta_0(theta_0SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type ocv_0(ocv_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type SOC_0(SOC_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type C_max(C_maxSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const double& >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const bool& >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type traceLimit(traceLimitSEXP);
    rcpp_result_gen = Rcpp::wrap(SODEFKFilterCpp(I, V, theta_0, ocv_0, SOC_0, C_max, P, Q, R, dt, K, trace, traceLimit));
    return rcpp_result_gen;
END_RCPP
}
// SODEFKSmoothCpp
Rcpp::List SODEFKSmoothCpp(const arma::colvec& I, const arma::colvec& V, const arma::colvec& theta_0, const arma::colvec& ocv_0, const double& SOC_0, const double& C_max, const std::vector<arma::mat>& P, const std::vector<arma::mat>& Q, const std::vector<arma::mat>& R, const double& dt, const unsigned int K, const bool& trace, const unsigned int& traceLimit);
RcppExport SEXP _BatteryPrognostics_SODEFKSmoothCpp(SEXP ISEXP, SEXP VSEXP, SEXP theta_0SEXP, SEXP ocv_0SEXP, SEXP SOC_0SEXP, SEXP C_maxSEXP, SEXP PSEXP, SEXP QSEXP, SEXP RSEXP, SEXP dtSEXP, SEXP KSEXP, SEXP traceSEXP, SEXP traceLimitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type theta_0(theta_0SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type ocv_0(ocv_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type SOC_0(SOC_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type C_max(C_maxSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const double& >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const bool& >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type traceLimit(traceLimitSEXP);
    rcpp_result_gen = Rcpp::wrap(SODEFKSmoothCpp(I, V, theta_0, ocv_0, SOC_0, C_max, P, Q, R, dt, K, trace, traceLimit));
    return rcpp_result_gen;
END_RCPP
}
// RCKCpp
Rcpp::List RCKCpp(const arma::colvec& I, const arma::colvec& IC, const arma::colvec& IF, const arma::mat& R0, const std::vector<arma::mat>& Rk, const std::vector<arma::mat>& Ck, const arma::mat& Cap, const arma::mat& OCV, const arma::colvec SOCList, const arma::colvec IList, const double& dt, const double& SOCStart, const bool& trace, const unsigned int& traceLimit);
RcppExport SEXP _BatteryPrognostics_RCKCpp(SEXP ISEXP, SEXP ICSEXP, SEXP IFSEXP, SEXP R0SEXP, SEXP RkSEXP, SEXP CkSEXP, SEXP CapSEXP, SEXP OCVSEXP, SEXP SOCListSEXP, SEXP IListSEXP, SEXP dtSEXP, SEXP SOCStartSEXP, SEXP traceSEXP, SEXP traceLimitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type IC(ICSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type IF(IFSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R0(R0SEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type Rk(RkSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type Ck(CkSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Cap(CapSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type OCV(OCVSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type SOCList(SOCListSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type IList(IListSEXP);
    Rcpp::traits::input_parameter< const double& >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< const double& >::type SOCStart(SOCStartSEXP);
    Rcpp::traits::input_parameter< const bool& >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type traceLimit(traceLimitSEXP);
    rcpp_result_gen = Rcpp::wrap(RCKCpp(I, IC, IF, R0, Rk, Ck, Cap, OCV, SOCList, IList, dt, SOCStart, trace, traceLimit));
    return rcpp_result_gen;
END_RCPP
}
// ParameterEKFCpp
Rcpp::List ParameterEKFCpp(const arma::colvec& I, const arma::colvec& V, const arma::colvec& theta_0, const double& SOC_0, const double& Q_max, const arma::mat& P, const arma::mat& Q, const arma::mat& R, const double& dt, const unsigned int K, const unsigned int W, const bool& trace, const unsigned int& traceLimit);
RcppExport SEXP _BatteryPrognostics_ParameterEKFCpp(SEXP ISEXP, SEXP VSEXP, SEXP theta_0SEXP, SEXP SOC_0SEXP, SEXP Q_maxSEXP, SEXP PSEXP, SEXP QSEXP, SEXP RSEXP, SEXP dtSEXP, SEXP KSEXP, SEXP WSEXP, SEXP traceSEXP, SEXP traceLimitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type theta_0(theta_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type SOC_0(SOC_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type Q_max(Q_maxSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const double& >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type W(WSEXP);
    Rcpp::traits::input_parameter< const bool& >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type traceLimit(traceLimitSEXP);
    rcpp_result_gen = Rcpp::wrap(ParameterEKFCpp(I, V, theta_0, SOC_0, Q_max, P, Q, R, dt, K, W, trace, traceLimit));
    return rcpp_result_gen;
END_RCPP
}
// ParameterUKFCpp
Rcpp::List ParameterUKFCpp(const arma::colvec& I, const arma::colvec& V, const arma::colvec& theta_0, const arma::mat& P_0, const double& SOC_0, const double& C_max, const double& eta, const arma::colvec& sigma_point_pars, const unsigned int& lag, const double& dt, const unsigned int K, const arma::mat& R_0, const arma::mat& Q_0, const bool& trace, const unsigned int& traceLimit);
RcppExport SEXP _BatteryPrognostics_ParameterUKFCpp(SEXP ISEXP, SEXP VSEXP, SEXP theta_0SEXP, SEXP P_0SEXP, SEXP SOC_0SEXP, SEXP C_maxSEXP, SEXP etaSEXP, SEXP sigma_point_parsSEXP, SEXP lagSEXP, SEXP dtSEXP, SEXP KSEXP, SEXP R_0SEXP, SEXP Q_0SEXP, SEXP traceSEXP, SEXP traceLimitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type theta_0(theta_0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P_0(P_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type SOC_0(SOC_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type C_max(C_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type sigma_point_pars(sigma_point_parsSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const double& >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R_0(R_0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q_0(Q_0SEXP);
    Rcpp::traits::input_parameter< const bool& >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type traceLimit(traceLimitSEXP);
    rcpp_result_gen = Rcpp::wrap(ParameterUKFCpp(I, V, theta_0, P_0, SOC_0, C_max, eta, sigma_point_pars, lag, dt, K, R_0, Q_0, trace, traceLimit));
    return rcpp_result_gen;
END_RCPP
}
// ParameterUKSCpp
Rcpp::List ParameterUKSCpp(const arma::colvec& I, const arma::colvec& V, const arma::colvec& theta_0, const arma::mat& P_0, const double& SOC_0, const double& C_max, const double& eta, const arma::colvec& sigma_point_pars, const unsigned int& lag, const unsigned int& M, const double& dt, const unsigned int K, const arma::mat& R_0, const arma::mat& Q_0, const bool& trace, const unsigned int& traceLimit);
RcppExport SEXP _BatteryPrognostics_ParameterUKSCpp(SEXP ISEXP, SEXP VSEXP, SEXP theta_0SEXP, SEXP P_0SEXP, SEXP SOC_0SEXP, SEXP C_maxSEXP, SEXP etaSEXP, SEXP sigma_point_parsSEXP, SEXP lagSEXP, SEXP MSEXP, SEXP dtSEXP, SEXP KSEXP, SEXP R_0SEXP, SEXP Q_0SEXP, SEXP traceSEXP, SEXP traceLimitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type theta_0(theta_0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P_0(P_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type SOC_0(SOC_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type C_max(C_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type sigma_point_pars(sigma_point_parsSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const double& >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R_0(R_0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q_0(Q_0SEXP);
    Rcpp::traits::input_parameter< const bool& >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type traceLimit(traceLimitSEXP);
    rcpp_result_gen = Rcpp::wrap(ParameterUKSCpp(I, V, theta_0, P_0, SOC_0, C_max, eta, sigma_point_pars, lag, M, dt, K, R_0, Q_0, trace, traceLimit));
    return rcpp_result_gen;
END_RCPP
}
// correct_time
arma::mat correct_time(const arma::colvec& I, const arma::colvec& V, const arma::colvec& T);
RcppExport SEXP _BatteryPrognostics_correct_time(SEXP ISEXP, SEXP VSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(correct_time(I, V, T));
    return rcpp_result_gen;
END_RCPP
}
// compare_windows_cpp
Rcpp::List compare_windows_cpp(const std::vector<double>& I1, const std::vector<double>& I2, const std::vector<double>& V1, const std::vector<double>& V2, const unsigned int& W, const unsigned int& R, const std::vector<double>& epsilon, const double& delta, const bool& trace, const unsigned int& trace_limit);
RcppExport SEXP _BatteryPrognostics_compare_windows_cpp(SEXP I1SEXP, SEXP I2SEXP, SEXP V1SEXP, SEXP V2SEXP, SEXP WSEXP, SEXP RSEXP, SEXP epsilonSEXP, SEXP deltaSEXP, SEXP traceSEXP, SEXP trace_limitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type I1(I1SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type I2(I2SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type V1(V1SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type V2(V2SEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type trace_limit(trace_limitSEXP);
    rcpp_result_gen = Rcpp::wrap(compare_windows_cpp(I1, I2, V1, V2, W, R, epsilon, delta, trace, trace_limit));
    return rcpp_result_gen;
END_RCPP
}
// compare_windows_ga_cpp
Rcpp::List compare_windows_ga_cpp(const std::vector<double>& I1, const std::vector<double>& I2, const std::vector<double>& V1, const std::vector<double>& V2, const std::vector<double>& Temp1, const std::vector<double>& Temp2, const unsigned int& mutation_window, const double& restrict_temperature, const double& restrict_voltage, const unsigned int& Wmin, const unsigned int& Wmax, const unsigned int& Imin, const unsigned int& N_evolution, const unsigned int& N_keep, const bool& trace, const unsigned int& trace_limit, const unsigned int& seed);
RcppExport SEXP _BatteryPrognostics_compare_windows_ga_cpp(SEXP I1SEXP, SEXP I2SEXP, SEXP V1SEXP, SEXP V2SEXP, SEXP Temp1SEXP, SEXP Temp2SEXP, SEXP mutation_windowSEXP, SEXP restrict_temperatureSEXP, SEXP restrict_voltageSEXP, SEXP WminSEXP, SEXP WmaxSEXP, SEXP IminSEXP, SEXP N_evolutionSEXP, SEXP N_keepSEXP, SEXP traceSEXP, SEXP trace_limitSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type I1(I1SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type I2(I2SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type V1(V1SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type V2(V2SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Temp1(Temp1SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Temp2(Temp2SEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type mutation_window(mutation_windowSEXP);
    Rcpp::traits::input_parameter< const double& >::type restrict_temperature(restrict_temperatureSEXP);
    Rcpp::traits::input_parameter< const double& >::type restrict_voltage(restrict_voltageSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type Wmin(WminSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type Wmax(WmaxSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type Imin(IminSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type N_evolution(N_evolutionSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type N_keep(N_keepSEXP);
    Rcpp::traits::input_parameter< const bool& >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type trace_limit(trace_limitSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(compare_windows_ga_cpp(I1, I2, V1, V2, Temp1, Temp2, mutation_window, restrict_temperature, restrict_voltage, Wmin, Wmax, Imin, N_evolution, N_keep, trace, trace_limit, seed));
    return rcpp_result_gen;
END_RCPP
}
// extract_resistance_cpp
Rcpp::List extract_resistance_cpp(const std::vector<double>& I, const std::vector<double>& V, const std::vector<double>& T_s, const double& epsilon, const double& Q_max, const double& eta, const double& SOC_0);
RcppExport SEXP _BatteryPrognostics_extract_resistance_cpp(SEXP ISEXP, SEXP VSEXP, SEXP T_sSEXP, SEXP epsilonSEXP, SEXP Q_maxSEXP, SEXP etaSEXP, SEXP SOC_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type T_s(T_sSEXP);
    Rcpp::traits::input_parameter< const double& >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type Q_max(Q_maxSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const double& >::type SOC_0(SOC_0SEXP);
    rcpp_result_gen = Rcpp::wrap(extract_resistance_cpp(I, V, T_s, epsilon, Q_max, eta, SOC_0));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BatteryPrognostics_SODEFKFilterCpp", (DL_FUNC) &_BatteryPrognostics_SODEFKFilterCpp, 13},
    {"_BatteryPrognostics_SODEFKSmoothCpp", (DL_FUNC) &_BatteryPrognostics_SODEFKSmoothCpp, 13},
    {"_BatteryPrognostics_RCKCpp", (DL_FUNC) &_BatteryPrognostics_RCKCpp, 14},
    {"_BatteryPrognostics_ParameterEKFCpp", (DL_FUNC) &_BatteryPrognostics_ParameterEKFCpp, 13},
    {"_BatteryPrognostics_ParameterUKFCpp", (DL_FUNC) &_BatteryPrognostics_ParameterUKFCpp, 15},
    {"_BatteryPrognostics_ParameterUKSCpp", (DL_FUNC) &_BatteryPrognostics_ParameterUKSCpp, 16},
    {"_BatteryPrognostics_correct_time", (DL_FUNC) &_BatteryPrognostics_correct_time, 3},
    {"_BatteryPrognostics_compare_windows_cpp", (DL_FUNC) &_BatteryPrognostics_compare_windows_cpp, 10},
    {"_BatteryPrognostics_compare_windows_ga_cpp", (DL_FUNC) &_BatteryPrognostics_compare_windows_ga_cpp, 17},
    {"_BatteryPrognostics_extract_resistance_cpp", (DL_FUNC) &_BatteryPrognostics_extract_resistance_cpp, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_BatteryPrognostics(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
